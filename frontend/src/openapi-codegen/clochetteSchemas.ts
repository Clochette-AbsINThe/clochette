/**
 * Generated by @openapi-codegen
 *
 * @version 2.1.1
 */
/**
 * This this the account model that is linked to the database and used by the API.
 *
 * Args:
 *     AccountBase: The base model to use.
 */
export type Account = {
  /**
   * @maxLength 32
   * @minLength 3
   */
  username: string;
  lastName: string;
  firstName: string;
  /**
   * @maximum 2026
   * @minimum 2000
   */
  promotionYear: number;
  id: number;
  scope: SecurityScopes;
  isActive: boolean;
};

export type AccountCreate = {
  /**
   * @maxLength 32
   * @minLength 3
   */
  username: string;
  lastName: string;
  firstName: string;
  password: string;
  /**
   * @maximum 2026
   * @minimum 2000
   */
  promotionYear: number;
};

export type AccountUpdate = {
  username?: string | null;
  lastName?: string | null;
  firstName?: string | null;
  password?: string | null;
  promotionYear?: number | null;
  scope?: SecurityScopes | null;
  isActive?: boolean | null;
};

export type BarrelDistinct = {
  id: number;
  drinkItemId: number;
  buyPrice: number;
  sellPrice: number;
  barrelSellPrice: number | null;
  emptyOrSolded: boolean;
  isMounted: boolean;
  quantity: number;
  name: string;
};

export type BarrelUpdate = {
  fkId?: number | null;
  sellPrice?: number | null;
  unitPrice?: number | null;
  /**
   * @default false
   */
  empty?: boolean | null;
  /**
   * @default false
   */
  isMounted?: boolean | null;
};

export type BarrelUpdateModify = {
  sellPrice?: number | null;
  emptyOrSolded?: boolean | null;
  isMounted?: boolean | null;
};

export type BarrelUpdateSale = {
  /**
   * @exclusiveMinimum 0
   */
  barrelSellPrice: number;
  transactionId: number;
};

export type BodyLogin = {
  grant_type?: string | null;
  username: string;
  password: string;
  /**
   * @default
   */
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type ConsumableDistinct = {
  id: number;
  consumableItemId: number;
  solded: boolean;
  sellPrice: number;
  buyPrice: number;
  quantity: number;
  name: string;
  icon: IconName;
};

export type ConsumableItem = {
  name: string;
  icon: IconName;
  id: number;
};

export type ConsumableItemCreate = {
  name: string;
  icon: IconName;
};

export type ConsumableItemUpdate = {
  name?: string | null;
  icon?: IconName | null;
};

export type ConsumableUpdate = {
  unitPrice?: number | null;
  sellPrice?: number | null;
};

export type ConsumableUpdateModify = {
  sellPrice?: number | null;
};

export type ConsumableUpdateSale = {
  /**
   * @default 0
   */
  transactionId?: number;
};

export type DrinkItem = {
  name: string;
  id: number;
};

export type DrinkItemCreate = {
  name: string;
};

export type DrinkItemUpdate = {
  name?: string | null;
};

export type HTTPError = {
  /**
   * Error message.
   */
  detail: string;
};

export type HTTPValidationError = {
  detail?: ValidationError[];
};

export type HealthResponse = {
  /**
   * OK
   */
  status: string;
};

export type IconName = 'Glass' | 'Beer' | 'Food' | 'Soft' | 'Barrel' | 'Misc';

export type Item = {
  table: string;
  /**
   * @exclusiveMinimum 0
   */
  quantity: number;
  item: Record<string, any> | ConsumableCreateV1 | OutOfStockCreate | BarrelCreateV1 | GlassCreateV1;
};

export type NonInventoried = {
  nonInventoriedItemId: number;
  buyPrice?: number | null;
  id: number;
  sellPrice: number | null;
  name: string;
  icon: IconName;
  trade: TradeType;
};

export type NonInventoriedCreate = {
  nonInventoriedItemId: number;
  buyPrice?: number | null;
  transactionId: number;
};

export type NonInventoriedItem = {
  /**
   * @minLength 1
   */
  name: string;
  icon: IconName;
  sellPrice?: number | null;
  id: number;
  trade: TradeType;
};

export type NonInventoriedItemCreate = {
  /**
   * @minLength 1
   */
  name: string;
  icon: IconName;
  sellPrice?: number | null;
};

export type NonInventoriedItemUpdate = {
  name?: string | null;
  icon?: IconName | null;
  sellPrice?: number | null;
};

export type OutOfStock = {
  fkId: number;
  unitPrice?: number | null;
  id: number;
  name: string;
  icon: IconName;
  sellPrice: number | null;
};

export type OutOfStockCreate = {
  fkId: number;
  unitPrice?: number | null;
  /**
   * @default 0
   */
  transaction_id?: number;
};

export type OutOfStockItem = {
  /**
   * @minLength 1
   */
  name: string;
  icon: IconName;
  sellPrice?: number | null;
  id: number;
  /**
   * buy_or_sell is True if the item does not have a sell price.
   */
  buyOrSell: boolean;
};

export type OutOfStockItemCreate = {
  /**
   * @minLength 1
   */
  name: string;
  icon: IconName;
  sellPrice?: number | null;
};

export type OutOfStockItemUpdate = {
  name?: string | null;
  icon?: IconName | null;
  sellPrice?: number | null;
};

export type OwnAccountUpdate = {
  username?: string | null;
  lastName?: string | null;
  firstName?: string | null;
  password?: string | null;
  promotionYear?: number | null;
};

export type PaymentMethod = 'CB' | 'Esp\u00E8ces' | 'Lydia' | 'Virement';

export type RootResponse = {
  /**
   * Hello, World!
   */
  msg: string;
};

export type SecurityScopes = 'staff' | 'treasurer' | 'president';

export type Status = 'pending' | 'validated';

export type Token = {
  access_token: string;
  /**
   * @default bearer
   */
  token_type?: string;
};

export type TradeType = 'purchase' | 'sale';

export type TransactionCommerceCreate = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  trade: TradeType;
};

export type TransactionDetail = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  trade: TradeType;
  id: number;
  treasuryId: number;
  type: TransactionType;
  status: Status;
  amount: number | null;
  description: string | null;
  barrelsPurchase: Barrel[];
  barrelsSale: Barrel[];
  glasses: Glass[];
  nonInventorieds: NonInventoried[];
  consumablesPurchase: Consumable[];
  consumablesSale: Consumable[];
};

export type TransactionFrontCreate = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  sale: boolean;
  amount: number;
  /**
   * @default transaction
   */
  type?: TransactionTypeV1;
  description?: string | null;
  items?: Item[];
};

export type TransactionSingle = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  sale: boolean;
  amount: number;
  /**
   * @default transaction
   */
  type?: TransactionTypeV1;
  description?: string | null;
  id: number;
  treasuryId: number;
  barrels: BarrelV1[] | null;
  glasses: GlassV1[] | null;
  outOfStocks: OutOfStock[] | null;
  consumablesPurchase: ConsumableV1[] | null;
  consumablesSale: ConsumableV1[] | null;
};

export type TransactionTreasuryCreate = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  trade: TradeType;
  amount: number;
  description: string;
};

export type TransactionType = 'commerce' | 'tresorery';

export type TransactionTypeV1 = 'transaction' | 'tresorery';

export type Treasury = {
  totalAmount: number;
  /**
   * @minimum 0
   */
  cashAmount: number;
  /**
   * @maximum 1
   * @minimum 0
   */
  lydiaRate: number;
  id: number;
};

export type TreasuryUpdate = {
  lydiaRate?: number | null;
};

export type ValidationError = {
  loc: (string | number)[];
  msg: string;
  type: string;
};

export type VersionResponse = {
  /**
   * Version of the API.
   */
  version: string;
};

export type BarrelV1 = {
  fkId?: number | null;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  unitPrice: number;
  id: number;
  empty: boolean;
  isMounted: boolean;
  name: string;
};

export type BarrelCreateV1 = {
  fkId?: number | null;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  unitPrice: number;
  /**
   * @default 0
   */
  transaction_id?: number;
};

export type ConsumableV1 = {
  /**
   * @exclusiveMinimum 0
   */
  unitPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  id: number;
  fkId: number;
  empty: boolean;
  name: string;
  icon: IconName;
};

export type ConsumableCreateV1 = {
  /**
   * @exclusiveMinimum 0
   */
  unitPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  fkId: number;
  id?: number | null;
};

export type GlassV1 = {
  fkId: number;
  id: number;
  name: string;
  sellPrice: number;
};

export type GlassCreateV1 = {
  fkId: number;
  /**
   * @default 0
   */
  transaction_id?: number;
};

export type TransactionV1 = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  sale: boolean;
  amount: number;
  /**
   * @default transaction
   */
  type?: TransactionTypeV1;
  description?: string | null;
  id: number;
  treasuryId: number;
};

export type Barrel = {
  id: number;
  drinkItemId: number;
  buyPrice: number;
  sellPrice: number;
  barrelSellPrice: number | null;
  emptyOrSolded: boolean;
  isMounted: boolean;
  name: string;
};

export type BarrelCreate = {
  drinkItemId: number;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  buyPrice: number;
  transactionId: number;
};

export type Consumable = {
  id: number;
  consumableItemId: number;
  solded: boolean;
  sellPrice: number;
  buyPrice: number;
  name: string;
  icon: IconName;
};

export type ConsumableCreate = {
  consumableItemId: number;
  /**
   * @exclusiveMinimum 0
   */
  sellPrice: number;
  /**
   * @exclusiveMinimum 0
   */
  buyPrice: number;
  /**
   * @default 0
   */
  transactionId?: number;
};

export type Glass = {
  barrelId: number;
  id: number;
  sellPrice: number;
  name: string;
};

export type GlassCreate = {
  barrelId: number;
  transactionId: number;
};

export type Transaction = {
  /**
   * @format date-time
   */
  datetime: string;
  paymentMethod: PaymentMethod;
  trade: TradeType;
  id: number;
  treasuryId: number;
  type: TransactionType;
  status: Status;
  amount: number | null;
  description: string | null;
};
