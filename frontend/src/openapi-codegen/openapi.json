{
  "openapi": "3.1.0",
  "info": {
    "title": "Clochette API",
    "version": "2.1.1"
  },
  "paths": {
    "/api/v1/": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Root",
        "description": "Root endpoint.",
        "operationId": "root",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Health",
        "description": "Health endpoint.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        }
      }
    },
    "/api/v1/error": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Error",
        "description": "Error endpoint, which need to be used to test the exception monitor middleware.",
        "operationId": "error",
        "responses": {
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/version": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Version",
        "description": "Version endpoint.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        }
      }
    },
    "/api/v1/account/": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read Accounts",
        "description": "Retrieve a list of accounts.\n\nThis endpoint requires authentication with the \"president\" scope.",
        "operationId": "read_accounts",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "president",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Username"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Last Name"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "First Name"
            }
          },
          {
            "name": "promotion_year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Promotion Year"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SecurityScopes"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Scope"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Active"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "title": "Response Read Accounts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create Account",
        "description": "Create a new account.",
        "operationId": "create_account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/{account_id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read Account",
        "description": "Retrieve an account by ID.\n\nThis endpoint requires authentication with the \"president\" scope.",
        "operationId": "read_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "president",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Update Account",
        "description": "Update an account by ID.\n\nThis endpoint requires authentication with the \"president\" scope.",
        "operationId": "update_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "president",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Delete Account",
        "description": "Delete an account by ID.\n\nThis endpoint requires authentication with the \"president\" scope.",
        "operationId": "delete_account",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "president",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login/": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Logs in a user and returns an access token.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me/": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Read Account Me",
        "description": "Returns the current user's account information.",
        "operationId": "read_account_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Update Account Me",
        "description": "Updates the current user's account information.",
        "operationId": "update_account_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnAccountUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/barrel/": {
      "get": {
        "tags": [
          "barrel"
        ],
        "summary": "Read Barrels",
        "description": "Read barrels from the database.\n\nQuery parameters:\n    - `all`: If True, return all barrels. If False, return only mounted or unmounted barrels.\n    - `mounted`: If True, return only mounted barrels. If False, return only unmounted barrels.",
        "operationId": "v1_read_barrels",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "All"
            }
          },
          {
            "name": "mounted",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Mounted"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarrelV1"
                  },
                  "title": "Response V1 Read Barrels"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/barrel/distincts/": {
      "get": {
        "tags": [
          "barrel"
        ],
        "summary": "Read Distinct Barrels",
        "description": "Read distinct barrels from the database.",
        "operationId": "v1_read_distinct_barrels",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BarrelV1"
                  },
                  "type": "array",
                  "title": "Response V1 Read Distinct Barrels"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/barrel/{barrel_id}": {
      "put": {
        "tags": [
          "barrel"
        ],
        "summary": "Update Barrel",
        "description": "Update a barrel in the database.",
        "operationId": "v1_update_barrel",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "barrel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Barrel Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BarrelUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarrelV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consumable/": {
      "get": {
        "tags": [
          "consumable"
        ],
        "summary": "Read Consumables",
        "description": "Retrieve a list of consumables.",
        "operationId": "v1_read_consumables",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "All"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConsumableV1"
                  },
                  "title": "Response V1 Read Consumables"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consumable/distincts/": {
      "get": {
        "tags": [
          "consumable"
        ],
        "summary": "Read Consumables Distincts",
        "description": "Retrieve a list of distinct consumables.",
        "operationId": "v1_read_consumables_distincts",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsumableV1"
                  },
                  "type": "array",
                  "title": "Response V1 Read Consumables Distincts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/consumable/{consumable_id}": {
      "put": {
        "tags": [
          "consumable"
        ],
        "summary": "Update Consumable",
        "description": "Update a consumable.",
        "operationId": "v1_update_consumable",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumableV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/consumable_item/": {
      "get": {
        "tags": [
          "consumable_item"
        ],
        "summary": "Read Consumable Items",
        "description": "Retrieve a list of all consumable items.",
        "operationId": "read_consumable_items",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsumableItem"
                  },
                  "type": "array",
                  "title": "Response Read Consumable Items"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "consumable_item"
        ],
        "summary": "Create Consumable Item",
        "description": "Create a new consumable item.",
        "operationId": "create_consumable_item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumableItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/consumable_item/{consumable_item_id}": {
      "get": {
        "tags": [
          "consumable_item"
        ],
        "summary": "Read Consumable Item",
        "description": "Retrieve a specific consumable item by ID.",
        "operationId": "read_consumable_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumableItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "consumable_item"
        ],
        "summary": "Update Consumable Item",
        "description": "Update a specific consumable item by ID.",
        "operationId": "update_consumable_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumableItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "consumable_item"
        ],
        "summary": "Delete Consumable Item",
        "description": "Delete a specific consumable item by ID.",
        "operationId": "delete_consumable_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumableItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/drink/{drink_id}": {
      "get": {
        "tags": [
          "drink"
        ],
        "summary": "Read Drink",
        "description": "Retrieve a drink by ID.",
        "operationId": "read_drink",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "drink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Drink Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrinkItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "drink"
        ],
        "summary": "Update Drink",
        "description": "Update a drink by ID.",
        "operationId": "update_drink",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "drink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Drink Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrinkItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrinkItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "drink"
        ],
        "summary": "Delete Drink",
        "description": "Delete a drink by ID.",
        "operationId": "delete_drink",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "drink_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Drink Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrinkItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/drink/": {
      "get": {
        "tags": [
          "drink"
        ],
        "summary": "Read Drinks",
        "description": "Retrieve all drinks.",
        "operationId": "read_drinks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DrinkItem"
                  },
                  "type": "array",
                  "title": "Response Read Drinks"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "drink"
        ],
        "summary": "Create Drink",
        "description": "Create a new drink.",
        "operationId": "create_drink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrinkItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrinkItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/glass/": {
      "get": {
        "tags": [
          "glass"
        ],
        "summary": "Read Glasses",
        "description": "Retrieve a list of glasses that match the given query parameters.",
        "operationId": "v1_read_glasses",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "barrel_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Barrel Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlassV1"
                  },
                  "title": "Response V1 Read Glasses"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/out_of_stock/": {
      "get": {
        "tags": [
          "out_of_stock"
        ],
        "summary": "Read Out Of Stocks",
        "description": "Retrieve a list of out of stock items.",
        "operationId": "read_out_of_stocks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OutOfStock"
                  },
                  "type": "array",
                  "title": "Response Read Out Of Stocks"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/out_of_stock_item/buy/": {
      "get": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Read Out Of Stock Items Buy",
        "description": "Retrieve a list of out of stock items for buying.",
        "operationId": "read_out_of_stock_items_buy",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "icon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IconName"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon"
            }
          },
          {
            "name": "sell_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sell Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutOfStockItem"
                  },
                  "title": "Response Read Out Of Stock Items Buy"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/out_of_stock_item/sell/": {
      "get": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Read Out Of Stock Items Sell",
        "description": "Retrieve a list of out of stock items for selling.",
        "operationId": "read_out_of_stock_items_sell",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "icon",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IconName"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Icon"
            }
          },
          {
            "name": "sell_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sell Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutOfStockItem"
                  },
                  "title": "Response Read Out Of Stock Items Sell"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/out_of_stock_item/{out_of_stock_item_id}": {
      "get": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Read Out Of Stock Item",
        "description": "Retrieve an out of stock item by ID.",
        "operationId": "read_out_of_stock_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "out_of_stock_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Out Of Stock Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfStockItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Update Out Of Stock Item",
        "description": "Update an existing out of stock item.",
        "operationId": "update_out_of_stock_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "out_of_stock_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Out Of Stock Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutOfStockItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfStockItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Delete Out Of Stock Item",
        "description": "Delete an existing out of stock item.",
        "operationId": "delete_out_of_stock_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "out_of_stock_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Out Of Stock Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfStockItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/out_of_stock_item/": {
      "post": {
        "tags": [
          "out_of_stock_item"
        ],
        "summary": "Create Out Of Stock Item",
        "description": "Create a new out of stock item.",
        "operationId": "create_out_of_stock_item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutOfStockItemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutOfStockItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/transaction/": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Read Transactions",
        "operationId": "v1_read_transactions",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "datetime__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Datetime  Gt"
            }
          },
          {
            "name": "datetime__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Datetime  Lt"
            }
          },
          {
            "name": "datetime",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Datetime"
            }
          },
          {
            "name": "payment_method",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Payment Method"
            }
          },
          {
            "name": "sale",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sale"
            }
          },
          {
            "name": "amount__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Amount  Gt"
            }
          },
          {
            "name": "amount__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Amount  Lt"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Amount"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionTypeV1"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Type"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionV1"
                  },
                  "title": "Response V1 Read Transactions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Create Transaction",
        "operationId": "v1_create_transaction",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionFrontCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transaction/{transaction_id}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Read Transaction",
        "operationId": "v1_read_transaction",
        "deprecated": true,
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Transaction Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSingle"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/treasury/": {
      "get": {
        "tags": [
          "treasury"
        ],
        "summary": "Read Treasuries",
        "description": "Returns a list of all treasuries.\n\nRequires a user with the 'treasurer' scope to be authenticated.",
        "operationId": "read_treasuries",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Treasury"
                  },
                  "type": "array",
                  "title": "Response Read Treasuries"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "treasurer",
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/treasury/last": {
      "get": {
        "tags": [
          "treasury"
        ],
        "summary": "Read Last Treasury",
        "description": "Returns the last treasury.\n\nRequires a user with the 'treasurer' scope to be authenticated.",
        "operationId": "read_last_treasury",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Treasury"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "treasurer",
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v1/treasury/{treasury_id}": {
      "put": {
        "tags": [
          "treasury"
        ],
        "summary": "Update Treasury",
        "description": "Updates a treasury with the given ID.\n\nRequires a user with the 'treasurer' scope to be authenticated.",
        "operationId": "update_treasury",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "treasurer",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "treasury_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Treasury Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TreasuryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Treasury"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/barrel/": {
      "get": {
        "tags": [
          "barrel"
        ],
        "summary": "Read Barrels",
        "description": "Read barrels from the database.\n\nQuery parameters:\n    - `all`: A boolean indicating whether to return all consumables or only non-empty ones.\n    - `is_mounted`: If specified, if True, return only mounted barrels, else if False,\n            return only unmounted barrels.\n    - `drink_item_id`: If specified, return only barrels containing the specified drink item.",
        "operationId": "read_barrels",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "All"
            }
          },
          {
            "name": "is_mounted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Mounted"
            }
          },
          {
            "name": "drink_item_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Drink Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Barrel"
                  },
                  "title": "Response Read Barrels"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "barrel"
        ],
        "summary": "Create Barrel",
        "description": "Create a barrel in the database.",
        "operationId": "create_barrel",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BarrelCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Barrel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/barrel/distincts/": {
      "get": {
        "tags": [
          "barrel"
        ],
        "summary": "Read Distinct Barrels",
        "description": "Read distinct barrels from the database.\n\nQuery parameters:\n    - `is_mounted`: If specified, if True, return only mounted barrels, else if False,\n            return only unmounted barrels.",
        "operationId": "read_distinct_barrels",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "is_mounted",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Is Mounted"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarrelDistinct"
                  },
                  "title": "Response Read Distinct Barrels"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/barrel/{barrel_id}": {
      "patch": {
        "tags": [
          "barrel"
        ],
        "summary": "Update Barrel",
        "description": "Update a barrel in the database.",
        "operationId": "update_barrel",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "barrel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Barrel Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BarrelUpdateModify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Barrel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/barrel/{barrel_id}/sale": {
      "patch": {
        "tags": [
          "barrel"
        ],
        "summary": "Sale Barrel",
        "description": "Update a barrel in the database.",
        "operationId": "sale_barrel",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "barrel_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Barrel Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BarrelUpdateSale"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Barrel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/consumable/": {
      "get": {
        "tags": [
          "consumable"
        ],
        "summary": "Read Consumables",
        "description": "Retrieve a list of consumables.\n\nQuery parameters:\n    - `all`: A boolean indicating whether to return all consumables or only non-empty ones.",
        "operationId": "read_consumables",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "All"
            }
          },
          {
            "name": "consumable_item_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Consumable Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Consumable"
                  },
                  "title": "Response Read Consumables"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "consumable"
        ],
        "summary": "Create Consumable",
        "description": "Create a consumable.",
        "operationId": "create_consumable",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumable"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/consumable/{consumable_id}": {
      "get": {
        "tags": [
          "consumable"
        ],
        "summary": "Read Consumable",
        "description": "Retrieve a consumable.",
        "operationId": "read_consumable",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumable"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "consumable"
        ],
        "summary": "Update Consumable",
        "description": "Update a consumable.",
        "operationId": "update_consumable",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableUpdateModify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumable"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/consumable/distincts/": {
      "get": {
        "tags": [
          "consumable"
        ],
        "summary": "Read Distinct Consumables",
        "description": "Retrieve a list of distinct consumables.",
        "operationId": "read_distinct_consumables",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsumableDistinct"
                  },
                  "type": "array",
                  "title": "Response Read Distinct Consumables"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v2/consumable/{consumable_id}/sale": {
      "patch": {
        "tags": [
          "consumable"
        ],
        "summary": "Sale Consumable",
        "description": "Sale a consumable.",
        "operationId": "sale_consumable",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "consumable_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Consumable Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumableUpdateSale"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumable"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/glass/": {
      "get": {
        "tags": [
          "glass"
        ],
        "summary": "Read Glasses",
        "description": "Retrieve a list of glasses that match the given query parameters.",
        "operationId": "read_glasses",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "barrel_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Barrel Id"
            }
          },
          {
            "name": "transaction_sell_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Transaction Sell Price"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Glass"
                  },
                  "title": "Response Read Glasses"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "glass"
        ],
        "summary": "Create Glass",
        "description": "Create a new glass in the database.",
        "operationId": "create_glass",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlassCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Glass"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/glass/{glass_id}": {
      "get": {
        "tags": [
          "glass"
        ],
        "summary": "Read Glass",
        "description": "Retrieve a glass.",
        "operationId": "read_glass",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "glass_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Glass Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Glass"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/non_inventoried/": {
      "get": {
        "tags": [
          "non_inventoried"
        ],
        "summary": "Read Non Inventorieds",
        "description": "Retrieve a list of non inventorieds.",
        "operationId": "read_non_inventorieds",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NonInventoried"
                  },
                  "type": "array",
                  "title": "Response Read Non Inventorieds"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "non_inventoried"
        ],
        "summary": "Create Non Inventoried",
        "description": "Create a new non inventoried.",
        "operationId": "create_non_inventoried",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonInventoriedCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoried"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v2/non_inventoried/{non_inventoried_id}": {
      "get": {
        "tags": [
          "non_inventoried"
        ],
        "summary": "Read Non Inventoried",
        "description": "Retrieve a non inventoried.",
        "operationId": "read_non_inventoried",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "non_inventoried_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Non Inventoried Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoried"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/non_inventoried_item/": {
      "get": {
        "tags": [
          "non_inventoried_item"
        ],
        "summary": "Read Non Inventoried Items",
        "description": "Retrieve a list of non inventoried items.\n\nQuery parameters:\n    - `trade`: The trade type.\n    - `name`: The non inventoried item name.",
        "operationId": "read_non_inventoried_items",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "trade",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TradeType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Trade"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonInventoriedItem"
                  },
                  "title": "Response Read Non Inventoried Items"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "non_inventoried_item"
        ],
        "summary": "Create Non Inventoried Item",
        "description": "Create a non inventoried item.",
        "operationId": "create_non_inventoried_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonInventoriedItemCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoriedItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/non_inventoried_item/{non_inventoried_item_id}": {
      "get": {
        "tags": [
          "non_inventoried_item"
        ],
        "summary": "Read Non Inventoried Item",
        "description": "Retrieve a non inventoried item.",
        "operationId": "read_non_inventoried_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "non_inventoried_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Non Inventoried Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoriedItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "non_inventoried_item"
        ],
        "summary": "Update Non Inventoried Item",
        "description": "Update a non inventoried item.",
        "operationId": "update_non_inventoried_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "non_inventoried_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Non Inventoried Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonInventoriedItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoriedItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "non_inventoried_item"
        ],
        "summary": "Delete Non Inventoried Item",
        "description": "Delete a non inventoried item.",
        "operationId": "delete_non_inventoried_item",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "non_inventoried_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Non Inventoried Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonInventoriedItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/transaction/": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Create Transaction",
        "description": "Create a new transaction in the database.",
        "operationId": "create_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCommerceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Read Transactions",
        "description": "Retrieve transactions.",
        "operationId": "read_transactions",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "datetime__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Datetime  Gt"
            }
          },
          {
            "name": "datetime__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Datetime  Lt"
            }
          },
          {
            "name": "amount__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Amount  Gt"
            }
          },
          {
            "name": "amount__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Amount  Lt"
            }
          },
          {
            "name": "payment_method",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Payment Method"
            }
          },
          {
            "name": "trade",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TradeType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Trade"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TransactionType"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Status"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  },
                  "title": "Response Read Transactions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/transaction/treasury/": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Create Treasury Transaction",
        "description": "Create a new transaction in the database.\n\nThis endpoint requires authentication with the \"treasury\" scope.",
        "operationId": "create_treasury_transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionTreasuryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": [
              "treasurer",
              "staff"
            ]
          }
        ]
      }
    },
    "/api/v2/transaction/{transaction_id}/validate": {
      "patch": {
        "tags": [
          "transaction"
        ],
        "summary": "Validate Transaction",
        "description": "Validate a transaction.",
        "operationId": "validate_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Transaction Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/transaction/{transaction_id}": {
      "delete": {
        "tags": [
          "transaction"
        ],
        "summary": "Delete Transaction",
        "description": "Delete a transaction.\n\nThis endpoint requires authentication with the \"treasury\" scope.",
        "operationId": "delete_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "treasurer",
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Transaction Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "Read Transaction",
        "description": "Retrieve a transaction.",
        "operationId": "read_transaction",
        "security": [
          {
            "OAuth2PasswordBearer": [
              "staff"
            ]
          }
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Transaction Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "text/plain": {
                "example": "Internal server error"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 32,
            "minLength": 3,
            "title": "Username"
          },
          "lastName": {
            "type": "string",
            "title": "Lastname"
          },
          "firstName": {
            "type": "string",
            "title": "Firstname"
          },
          "promotionYear": {
            "type": "integer",
            "maximum": 2026.0,
            "minimum": 2000.0,
            "title": "Promotionyear"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "scope": {
            "$ref": "#/components/schemas/SecurityScopes"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive"
          }
        },
        "type": "object",
        "required": [
          "username",
          "lastName",
          "firstName",
          "promotionYear",
          "id",
          "scope",
          "isActive"
        ],
        "title": "Account",
        "description": "This this the account model that is linked to the database and used by the API.\n\nArgs:\n    AccountBase: The base model to use."
      },
      "AccountCreate": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 32,
            "minLength": 3,
            "title": "Username"
          },
          "lastName": {
            "type": "string",
            "title": "Lastname"
          },
          "firstName": {
            "type": "string",
            "title": "Firstname"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "promotionYear": {
            "type": "integer",
            "maximum": 2026.0,
            "minimum": 2000.0,
            "title": "Promotionyear"
          }
        },
        "type": "object",
        "required": [
          "username",
          "lastName",
          "firstName",
          "password",
          "promotionYear"
        ],
        "title": "AccountCreate"
      },
      "AccountUpdate": {
        "properties": {
          "username": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "promotionYear": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 2026.0,
                "minimum": 2000.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Promotionyear"
          },
          "scope": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SecurityScopes"
              },
              {
                "type": "null"
              }
            ]
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive"
          }
        },
        "type": "object",
        "title": "AccountUpdate"
      },
      "BarrelDistinct": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "drinkItemId": {
            "type": "integer",
            "title": "Drinkitemid"
          },
          "buyPrice": {
            "type": "number",
            "title": "Buyprice"
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice"
          },
          "barrelSellPrice": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Barrelsellprice"
          },
          "emptyOrSolded": {
            "type": "boolean",
            "title": "Emptyorsolded"
          },
          "isMounted": {
            "type": "boolean",
            "title": "Ismounted"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "drinkItemId",
          "buyPrice",
          "sellPrice",
          "barrelSellPrice",
          "emptyOrSolded",
          "isMounted",
          "quantity",
          "name"
        ],
        "title": "BarrelDistinct"
      },
      "BarrelUpdate": {
        "properties": {
          "fkId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fkid"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          },
          "unitPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unitprice"
          },
          "empty": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Empty",
            "default": false
          },
          "isMounted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ismounted",
            "default": false
          }
        },
        "type": "object",
        "title": "BarrelUpdate"
      },
      "BarrelUpdateModify": {
        "properties": {
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          },
          "emptyOrSolded": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Emptyorsolded"
          },
          "isMounted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ismounted"
          }
        },
        "type": "object",
        "title": "BarrelUpdateModify"
      },
      "BarrelUpdateSale": {
        "properties": {
          "barrelSellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Barrelsellprice"
          },
          "transactionId": {
            "type": "integer",
            "title": "Transactionid"
          }
        },
        "type": "object",
        "required": [
          "barrelSellPrice",
          "transactionId"
        ],
        "title": "BarrelUpdateSale"
      },
      "Body_login": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login"
      },
      "ConsumableDistinct": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "consumableItemId": {
            "type": "integer",
            "title": "Consumableitemid"
          },
          "solded": {
            "type": "boolean",
            "title": "Solded"
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice"
          },
          "buyPrice": {
            "type": "number",
            "title": "Buyprice"
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconName"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "consumableItemId",
          "solded",
          "sellPrice",
          "buyPrice",
          "quantity",
          "name",
          "icon"
        ],
        "title": "ConsumableDistinct"
      },
      "ConsumableItem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon",
          "id"
        ],
        "title": "ConsumableItem"
      },
      "ConsumableItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon"
        ],
        "title": "ConsumableItemCreate"
      },
      "ConsumableItemUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IconName"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ConsumableItemUpdate"
      },
      "ConsumableUpdate": {
        "properties": {
          "unitPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unitprice"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "title": "ConsumableUpdate"
      },
      "ConsumableUpdateModify": {
        "properties": {
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "title": "ConsumableUpdateModify"
      },
      "ConsumableUpdateSale": {
        "properties": {
          "transactionId": {
            "type": "integer",
            "title": "Transactionid",
            "default": 0
          }
        },
        "type": "object",
        "title": "ConsumableUpdateSale"
      },
      "DrinkItem": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "DrinkItem"
      },
      "DrinkItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DrinkItemCreate"
      },
      "DrinkItemUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "title": "DrinkItemUpdate"
      },
      "HTTPError": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "HTTPError"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "OK"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthResponse"
      },
      "IconName": {
        "type": "string",
        "enum": [
          "Glass",
          "Beer",
          "Food",
          "Soft",
          "Barrel",
          "Misc"
        ],
        "title": "IconName"
      },
      "Item": {
        "properties": {
          "table": {
            "type": "string",
            "title": "Table"
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Quantity"
          },
          "item": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ConsumableCreateV1"
              },
              {
                "$ref": "#/components/schemas/OutOfStockCreate"
              },
              {
                "$ref": "#/components/schemas/BarrelCreateV1"
              },
              {
                "$ref": "#/components/schemas/GlassCreateV1"
              }
            ],
            "title": "Item"
          }
        },
        "type": "object",
        "required": [
          "table",
          "quantity",
          "item"
        ],
        "title": "Item"
      },
      "NonInventoried": {
        "properties": {
          "nonInventoriedItemId": {
            "type": "integer",
            "title": "Noninventorieditemid"
          },
          "buyPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconName"
              }
            ],
            "readOnly": true
          },
          "trade": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TradeType"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "nonInventoriedItemId",
          "id",
          "sellPrice",
          "name",
          "icon",
          "trade"
        ],
        "title": "NonInventoried"
      },
      "NonInventoriedCreate": {
        "properties": {
          "nonInventoriedItemId": {
            "type": "integer",
            "title": "Noninventorieditemid"
          },
          "buyPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Buyprice"
          },
          "transactionId": {
            "type": "integer",
            "title": "Transactionid"
          }
        },
        "type": "object",
        "required": [
          "nonInventoriedItemId",
          "transactionId"
        ],
        "title": "NonInventoriedCreate"
      },
      "NonInventoriedItem": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "trade": {
            "$ref": "#/components/schemas/TradeType"
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon",
          "id",
          "trade"
        ],
        "title": "NonInventoriedItem"
      },
      "NonInventoriedItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon"
        ],
        "title": "NonInventoriedItemCreate"
      },
      "NonInventoriedItemUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IconName"
              },
              {
                "type": "null"
              }
            ]
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "title": "NonInventoriedItemUpdate"
      },
      "OutOfStock": {
        "properties": {
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "unitPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unitprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconName"
              }
            ],
            "readOnly": true
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "fkId",
          "id",
          "name",
          "icon",
          "sellPrice"
        ],
        "title": "OutOfStock"
      },
      "OutOfStockCreate": {
        "properties": {
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "unitPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Unitprice"
          },
          "transaction_id": {
            "type": "integer",
            "title": "Transaction Id",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "fkId"
        ],
        "title": "OutOfStockCreate"
      },
      "OutOfStockItem": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "buyOrSell": {
            "type": "boolean",
            "title": "Buyorsell",
            "description": "buy_or_sell is True if the item does not have a sell price.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon",
          "id",
          "buyOrSell"
        ],
        "title": "OutOfStockItem"
      },
      "OutOfStockItemCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name"
          },
          "icon": {
            "$ref": "#/components/schemas/IconName"
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "required": [
          "name",
          "icon"
        ],
        "title": "OutOfStockItemCreate"
      },
      "OutOfStockItemUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IconName"
              },
              {
                "type": "null"
              }
            ]
          },
          "sellPrice": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Sellprice"
          }
        },
        "type": "object",
        "title": "OutOfStockItemUpdate"
      },
      "OwnAccountUpdate": {
        "properties": {
          "username": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 32,
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "promotionYear": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 2026.0,
                "minimum": 2000.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Promotionyear"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OwnAccountUpdate"
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "CB",
          "Esp\u00e8ces",
          "Lydia",
          "Virement"
        ],
        "title": "PaymentMethod"
      },
      "RootResponse": {
        "properties": {
          "msg": {
            "type": "string",
            "title": "Msg",
            "description": "Hello, World!"
          }
        },
        "type": "object",
        "required": [
          "msg"
        ],
        "title": "RootResponse"
      },
      "SecurityScopes": {
        "type": "string",
        "enum": [
          "staff",
          "treasurer",
          "president"
        ],
        "title": "SecurityScopes"
      },
      "Status": {
        "type": "string",
        "enum": [
          "pending",
          "validated"
        ],
        "title": "Status"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "Token"
      },
      "TradeType": {
        "type": "string",
        "enum": [
          "purchase",
          "sale"
        ],
        "title": "TradeType"
      },
      "TransactionCommerceCreate": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "trade": {
            "$ref": "#/components/schemas/TradeType"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "trade"
        ],
        "title": "TransactionCommerceCreate"
      },
      "TransactionDetail": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "trade": {
            "$ref": "#/components/schemas/TradeType"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "treasuryId": {
            "type": "integer",
            "title": "Treasuryid"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "barrelsPurchase": {
            "items": {
              "$ref": "#/components/schemas/Barrel"
            },
            "type": "array",
            "title": "Barrelspurchase"
          },
          "barrelsSale": {
            "items": {
              "$ref": "#/components/schemas/Barrel"
            },
            "type": "array",
            "title": "Barrelssale"
          },
          "glasses": {
            "items": {
              "$ref": "#/components/schemas/Glass"
            },
            "type": "array",
            "title": "Glasses"
          },
          "nonInventorieds": {
            "items": {
              "$ref": "#/components/schemas/NonInventoried"
            },
            "type": "array",
            "title": "Noninventorieds"
          },
          "consumablesPurchase": {
            "items": {
              "$ref": "#/components/schemas/Consumable"
            },
            "type": "array",
            "title": "Consumablespurchase"
          },
          "consumablesSale": {
            "items": {
              "$ref": "#/components/schemas/Consumable"
            },
            "type": "array",
            "title": "Consumablessale"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "trade",
          "id",
          "treasuryId",
          "type",
          "status",
          "amount",
          "description",
          "barrelsPurchase",
          "barrelsSale",
          "glasses",
          "nonInventorieds",
          "consumablesPurchase",
          "consumablesSale"
        ],
        "title": "TransactionDetail"
      },
      "TransactionFrontCreate": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "sale": {
            "type": "boolean",
            "title": "Sale"
          },
          "amount": {
            "type": "number",
            "title": "Amount"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeV1"
              }
            ],
            "default": "transaction"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "title": "Items",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "sale",
          "amount"
        ],
        "title": "TransactionFrontCreate"
      },
      "TransactionSingle": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "sale": {
            "type": "boolean",
            "title": "Sale"
          },
          "amount": {
            "type": "number",
            "title": "Amount"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeV1"
              }
            ],
            "default": "transaction"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "treasuryId": {
            "type": "integer",
            "title": "Treasuryid"
          },
          "barrels": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/BarrelV1"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Barrels"
          },
          "glasses": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/GlassV1"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Glasses"
          },
          "outOfStocks": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OutOfStock"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outofstocks"
          },
          "consumablesPurchase": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConsumableV1"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Consumablespurchase"
          },
          "consumablesSale": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConsumableV1"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Consumablessale"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "sale",
          "amount",
          "id",
          "treasuryId",
          "barrels",
          "glasses",
          "outOfStocks",
          "consumablesPurchase",
          "consumablesSale"
        ],
        "title": "TransactionSingle"
      },
      "TransactionTreasuryCreate": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "trade": {
            "$ref": "#/components/schemas/TradeType"
          },
          "amount": {
            "type": "number",
            "title": "Amount"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "trade",
          "amount",
          "description"
        ],
        "title": "TransactionTreasuryCreate"
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "commerce",
          "tresorery"
        ],
        "title": "TransactionType"
      },
      "TransactionTypeV1": {
        "type": "string",
        "enum": [
          "transaction",
          "tresorery"
        ],
        "title": "TransactionTypeV1"
      },
      "Treasury": {
        "properties": {
          "totalAmount": {
            "type": "number",
            "title": "Totalamount"
          },
          "cashAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Cashamount"
          },
          "lydiaRate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Lydiarate"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "totalAmount",
          "cashAmount",
          "lydiaRate",
          "id"
        ],
        "title": "Treasury"
      },
      "TreasuryUpdate": {
        "properties": {
          "lydiaRate": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Lydiarate"
          }
        },
        "type": "object",
        "title": "TreasuryUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VersionResponse": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the API."
          }
        },
        "type": "object",
        "required": [
          "version"
        ],
        "title": "VersionResponse"
      },
      "BarrelV1": {
        "properties": {
          "fkId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fkid"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "unitPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Unitprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "empty": {
            "type": "boolean",
            "title": "Empty"
          },
          "isMounted": {
            "type": "boolean",
            "title": "Ismounted"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "sellPrice",
          "unitPrice",
          "id",
          "empty",
          "isMounted",
          "name"
        ],
        "title": "Barrel"
      },
      "BarrelCreateV1": {
        "properties": {
          "fkId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fkid"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "unitPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Unitprice"
          },
          "transaction_id": {
            "type": "integer",
            "title": "Transaction Id",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "sellPrice",
          "unitPrice"
        ],
        "title": "BarrelCreate"
      },
      "ConsumableV1": {
        "properties": {
          "unitPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Unitprice"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "empty": {
            "type": "boolean",
            "title": "Empty"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconName"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "unitPrice",
          "sellPrice",
          "id",
          "fkId",
          "empty",
          "name",
          "icon"
        ],
        "title": "Consumable"
      },
      "ConsumableCreateV1": {
        "properties": {
          "unitPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Unitprice"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "unitPrice",
          "sellPrice",
          "fkId"
        ],
        "title": "ConsumableCreate"
      },
      "GlassV1": {
        "properties": {
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "fkId",
          "id",
          "name",
          "sellPrice"
        ],
        "title": "Glass"
      },
      "GlassCreateV1": {
        "properties": {
          "fkId": {
            "type": "integer",
            "title": "Fkid"
          },
          "transaction_id": {
            "type": "integer",
            "title": "Transaction Id",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "fkId"
        ],
        "title": "GlassCreate"
      },
      "TransactionV1": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "sale": {
            "type": "boolean",
            "title": "Sale"
          },
          "amount": {
            "type": "number",
            "title": "Amount"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeV1"
              }
            ],
            "default": "transaction"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "treasuryId": {
            "type": "integer",
            "title": "Treasuryid"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "sale",
          "amount",
          "id",
          "treasuryId"
        ],
        "title": "Transaction"
      },
      "Barrel": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "drinkItemId": {
            "type": "integer",
            "title": "Drinkitemid"
          },
          "buyPrice": {
            "type": "number",
            "title": "Buyprice"
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice"
          },
          "barrelSellPrice": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Barrelsellprice"
          },
          "emptyOrSolded": {
            "type": "boolean",
            "title": "Emptyorsolded"
          },
          "isMounted": {
            "type": "boolean",
            "title": "Ismounted"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "drinkItemId",
          "buyPrice",
          "sellPrice",
          "barrelSellPrice",
          "emptyOrSolded",
          "isMounted",
          "name"
        ],
        "title": "Barrel"
      },
      "BarrelCreate": {
        "properties": {
          "drinkItemId": {
            "type": "integer",
            "title": "Drinkitemid"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "buyPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Buyprice"
          },
          "transactionId": {
            "type": "integer",
            "title": "Transactionid"
          }
        },
        "type": "object",
        "required": [
          "drinkItemId",
          "sellPrice",
          "buyPrice",
          "transactionId"
        ],
        "title": "BarrelCreate"
      },
      "Consumable": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "consumableItemId": {
            "type": "integer",
            "title": "Consumableitemid"
          },
          "solded": {
            "type": "boolean",
            "title": "Solded"
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice"
          },
          "buyPrice": {
            "type": "number",
            "title": "Buyprice"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IconName"
              }
            ],
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "consumableItemId",
          "solded",
          "sellPrice",
          "buyPrice",
          "name",
          "icon"
        ],
        "title": "Consumable"
      },
      "ConsumableCreate": {
        "properties": {
          "consumableItemId": {
            "type": "integer",
            "title": "Consumableitemid"
          },
          "sellPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Sellprice"
          },
          "buyPrice": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Buyprice"
          },
          "transactionId": {
            "type": "integer",
            "title": "Transactionid",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "consumableItemId",
          "sellPrice",
          "buyPrice"
        ],
        "title": "ConsumableCreate"
      },
      "Glass": {
        "properties": {
          "barrelId": {
            "type": "integer",
            "title": "Barrelid"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "sellPrice": {
            "type": "number",
            "title": "Sellprice"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "barrelId",
          "id",
          "sellPrice",
          "name"
        ],
        "title": "Glass"
      },
      "GlassCreate": {
        "properties": {
          "barrelId": {
            "type": "integer",
            "title": "Barrelid"
          },
          "transactionId": {
            "type": "integer",
            "title": "Transactionid"
          }
        },
        "type": "object",
        "required": [
          "barrelId",
          "transactionId"
        ],
        "title": "GlassCreate"
      },
      "Transaction": {
        "properties": {
          "datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Datetime"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "trade": {
            "$ref": "#/components/schemas/TradeType"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "treasuryId": {
            "type": "integer",
            "title": "Treasuryid"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "datetime",
          "paymentMethod",
          "trade",
          "id",
          "treasuryId",
          "type",
          "status",
          "amount",
          "description"
        ],
        "title": "Transaction"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "staff": "Manage stock and create transactions",
              "treasurer": "Manage treasury, i.e. CRUD over transactions",
              "president": "Manage users, i.e. CRUD over users"
            },
            "tokenUrl": "/api/v1/auth/login/"
          }
        }
      }
    }
  }
}