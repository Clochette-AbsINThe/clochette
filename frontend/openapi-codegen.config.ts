import { writeFile } from 'fs/promises';

import { defineConfig } from '@openapi-codegen/cli';
import type { Context } from '@openapi-codegen/cli/lib/types';
import { generateSchemaTypes, generateReactQueryComponents } from '@openapi-codegen/typescript';
import type { PathItemObject } from 'openapi3-ts';


export default defineConfig({
  clochette: {
    from: {
      relativePath: './src/openapi-codegen/openapi.json',
      source: 'file'
    },
    outputDir: './src/openapi-codegen',
    to: async (context) => {
      const res = patchContentType(context);
      context = res[0];
      const patchedRoutes = res[1];

      const filenamePrefix = 'clochette';
      const { schemasFiles } = await generateSchemaTypes(context, {
        filenamePrefix
      });
      await generateReactQueryComponents(context, {
        filenamePrefix,
        schemasFiles
      });

      const unprotectedRoutes = getListOfUnprotectedRoutes(context);

      await createUtilites(patchedRoutes, unprotectedRoutes);
    }
  }
});

async function createUtilites(patchedRoutes: Record<string, string>[], unprotectedRoutes: Record<string, string>[]): Promise<void> {
  const utilites = `
/**
 * Generated by @openapi-codegen
 *
 */

export const patchedRoutes = ${JSON.stringify(patchedRoutes, null, 2)};
export const unprotectedRoutes = ${JSON.stringify(unprotectedRoutes, null, 2)};
`;

  await writeFile('./src/openapi-codegen/clochetteUtilities.ts', utilites);
}



function patchContentType(context: Context) {
  // Map over the paths of the OpenAPIObject to replace any 'application/x-www-form-urlencoded' with 'application/json'
  const patchedRoutes: Record<string, string>[] = [];
  Object.keys(context.openAPIDocument.paths).forEach((path) => {
    Object.keys(context.openAPIDocument.paths[path]).forEach((method) => {
      if (context.openAPIDocument.paths[path][method].requestBody !== undefined) {
        Object.keys(context.openAPIDocument.paths[path][method].requestBody.content).forEach((contentType) => {
          if (contentType === 'application/x-www-form-urlencoded') {
            context.openAPIDocument.paths[path][method].requestBody.content['application/json'] = context.openAPIDocument.paths[path][method].requestBody.content['application/x-www-form-urlencoded'];
            delete context.openAPIDocument.paths[path][method].requestBody.content['application/x-www-form-urlencoded'];
            patchedRoutes.push({
              path,
              method,
            });
          }
        });
      }
    });
  });

  return [context, patchedRoutes] as const; // return a tuple of the patched
}

function getListOfUnprotectedRoutes(context: Context) {
  const unprotectedRoutes: Record<string, string>[] = [];
  Object.keys(context.openAPIDocument.paths).forEach((path) => {
    const route = context.openAPIDocument.paths[path] as PathItemObject;
    Object.keys(route).forEach((method) => {
      if (context.openAPIDocument.paths[path][method].security === undefined) {
        unprotectedRoutes.push({
          path,
          method,
        });
      }
    });
  });
  return unprotectedRoutes;
}
